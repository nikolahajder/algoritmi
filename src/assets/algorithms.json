{
    "algos": [
        {
            "id": 1,
            "title": "Swap Value",
            "description": "Input two whole numbers into variables A and B. Using only math functions, swap the values in these two variables, without using 'if' or any helper variables",
            "paths": 
                {
                    "TypeScript": "/swap-value/swap-value.component.ts",
                    "HTML": "/swap-value/swap-value.component.html",
                    "CSS": "/swap-value/swap-value.component.css"
                }
            
        },
        {
            "id": 2,
            "title": "Higher Value",
            "description": "Input two whole numbers into variables A and B. Using only math functions, display the higher number in variable A, without using 'if' or any helper variables",
            "paths": 
                {
                    "TypeScript": "/higher-value/higher-value.component.ts",
                    "HTML": "/higher-value/higher-value.component.html",
                    "CSS": "/higher-value/higher-value.component.css"
                }
        },
        {
            "id": 3,
            "title": "Fibonacci",
            "description": "Input a number and show exactly that many fibonacci numbers.",
            "paths": 
                {
                    "TypeScript": "/fibonacci/fibonacci.component.ts",
                    "HTML": "/fibonacci/fibonacci.component.html",
                    "CSS": "/fibonacci/fibonacci.component.css"
                }
        },
        {
            "id": 4,
            "title": "Bar Chart",
            "description": "Input an array of numbers separated by commas and display a bar chart for those numbers.",
            "paths": 
                {
                    "TypeScript": "/bar-chart/bar-chart.component.ts",
                    "HTML": "/bar-chart/bar-chart.component.html",
                    "CSS": "/bar-chart/bar-chart.component.css"
                }
        },
        {
            "id": 5,
            "title": "Swap Bars",
            "description": "Input two numbers that represent position of the bars that need to be switched.",
            "paths": 
                {
                    "TypeScript": "/swap-bars/swap-bars.component.ts",
                    "HTML": "/swap-bars/swap-bars.component.html",
                    "CSS": "/swap-bars/swap-bars.component.css"
                }
        },
        {
            "id": 6,
            "title": "Insertion Sort",
            "description": "Using insertion sort, sort bar chart from lowest value to highest.",
            "paths": 
                {
                    "TypeScript": "/sort-bars/sort-bars.component.ts",
                    "HTML": "/sort-bars/sort-bars.component.html",
                    "CSS": "/sort-bars/sort-bars.component.css"
                }
        },
        {
            "id": 7,
            "title": "Bubble Sort",
            "description": "Using bubble sort, sort bar chart from lowest value to highest.",
            "paths": 
                {
                    "TypeScript": "/bubble-sort/bubble-sort.component.ts",
                    "HTML": "/bubble-sort/bubble-sort.component.html",
                    "CSS": "/bubble-sort/bubble-sort.component.css"
                }
        },
        {
            "id": 8,
            "title": "Selection Sort",
            "description": "Using selection sort, sort bar chart from lowest value to highest.",
            "paths": 
                {
                    "TypeScript": "/selection-sort/selection-sort.component.ts",
                    "HTML": "/selection-sort/selection-sort.component.html",
                    "CSS": "/selection-sort/selection-sort.component.css"
                }
        },
        {
            "id": 9,
            "title": "Heap Sort",
            "description": "Using heap sort, sort bar chart from lowest value to highest.",
            "paths": 
                {
                    "TypeScript": "/heap-sort/heap-sort.component.ts",
                    "HTML": "/heap-sort/heap-sort.component.html",
                    "CSS": "/heap-sort/heap-sort.component.css"
                }
        },
        {
            "id": 10,
            "title": "Quick Sort",
            "description": "Using quick sort, sort bar chart from lowest value to highest.",
            "paths": 
                {
                    "TypeScript": "/quick-sort/quick-sort.component.ts",
                    "HTML": "/quick-sort/quick-sort.component.html",
                    "CSS": "/quick-sort/quick-sort.component.css"
                }
        },
        {
            "id": 11,
            "title": "Binary Digits",
            "description": "Enter an integer number and calcuate how many binary digits it requires to display in binary.",
            "paths": 
                {
                    "TypeScript": "/binary-digits/binary-digits.component.ts",
                    "HTML": "/binary-digits/binary-digits.component.html",
                    "CSS": "/binary-digits/binary-digits.component.css"
                }
        },
        {
            "id": 12,
            "title": "Binary Search",
            "description": "Enter a range of numbers and imagine an integer number within that range, the algorithm will tell you the highest number of guesses it needs to guess the number you imagined. It will also start a binary search of the number.",
            "paths": 
                {
                    "TypeScript": "/binary-search/binary-search.component.ts",
                    "HTML": "/binary-search/binary-search.component.html",
                    "CSS": "/binary-search/binary-search.component.css"
                }
        },
        {
            "id": 13,
            "title": "Prime Check",
            "description": "Enter an integer number and respond whether it is a prime number or not.",
            "paths": 
                {
                    "TypeScript": "/prime-check/prime-check.component.ts",
                    "HTML": "/prime-check/prime-check.component.html",
                    "CSS": "/prime-check/prime-check.component.css"
                }
        },
        {
            "id": 14,
            "title": "Prime Find",
            "description": "Enter a range of numbers and display all prime numbers within that range.",
            "paths": 
                {
                    "TypeScript": "/prime-find/prime-find.component.ts",
                    "HTML": "/prime-find/prime-find.component.html",
                    "CSS": "/prime-find/prime-find.component.css"
                }
        },
        {
            "id": 15,
            "title": "Prime Display",
            "description": "Enter a number n and display n-th prime number.",
            "paths": 
                {
                    "TypeScript": "/prime-display/prime-display.component.ts",
                    "HTML": "/prime-display/prime-display.component.html",
                    "CSS": "/prime-display/prime-display.component.css"
                }
        },
        {
            "id": 16,
            "title": "Prime number find",
            "description": "Using sieve of Eratosthenes, enter a range of numbers and display all prime numbers within that range..",
            "paths": 
                {
                    "TypeScript": "/prime-number-find/prime-number-find.component.ts",
                    "HTML": "/prime-number-find/prime-number-find.component.html",
                    "CSS": "/prime-number-find/prime-number-find.component.css"
                }
        },
        {
            "id": 17,
            "title": "String container",
            "description": "Enter two strings and determine does the second string contain the first one or not.",
            "paths": 
                {
                    "TypeScript": "/string-container/string-container.component.ts",
                    "HTML": "/string-container/string-container.component.html",
                    "CSS": "/string-container/string-container.component.css"
                }
        },
        {
            "id": 18,
            "title": "Substring",
            "description": "Return the longest substring that 2 strings share.",
            "paths": 
                {
                    "TypeScript": "/substring/substring.component.ts",
                    "HTML": "/substring/substring.component.html",
                    "CSS": "/substring/substring.component.css"
                }
        },
        {
            "id": 19,
            "title": "Subsequence",
            "description": "Return the longest subsequence that 2 strings share.",
            "paths": 
                {
                    "TypeScript": "/subsequence/subsequence.component.ts",
                    "HTML": "/subsequence/subsequence.component.html",
                    "CSS": "/subsequence/subsequence.component.css"
                }
        },
        {
            "id": 20,
            "title": "Mass Murder",
            "description": "Enter a number of people who stand in a circle. Starting from person 1, every person kills the person standing next to him. Determine who is the last person standing.",
            "paths": 
                {
                    "TypeScript": "/mass-murder/mass-murder.component.ts",
                    "HTML": "/mass-murder/mass-murder.component.html",
                    "CSS": "/mass-murder/mass-murder.component.css"
                }
        },
        {
            "id": 21,
            "title": "Josephus",
            "description": "Enter a number of people who stand in a circle. Starting from person 1, every person kills the person standing next to him. Determine who is the last person standing using Josephus calculation.",
            "paths": 
                {
                    "TypeScript": "/josephus/josephus.component.ts",
                    "HTML": "/josephus/josephus.component.html",
                    "CSS": "/josephus/josephus.component.css"
                }
        },
        {
            "id": 22,
            "title": "Sierpinski Triangle",
            "description": "Construct the Sierpinski triangle with the depth of a user input.",
            "paths": 
                {
                    "TypeScript": "/sierpinski-triangle/sierpinski-triangle.component.ts",
                    "HTML": "/sierpinski-triangle/sierpinski-triangle.component.html",
                    "CSS": "/sierpinski-triangle/sierpinski-triangle.component.css"
                }
        },
        {
            "id": 23,
            "title": "Bouncing Ball",
            "description": "bouncing ball",
            "paths": 
                {
                    "TypeScript": "/bouncing-ball/bouncing-ball.component.ts",
                    "HTML": "/bouncing-ball/bouncing-ball.component.html",
                    "CSS": "/bouncing-ball/bouncing-ball.component.css"
                }
        },
        {
            "id": 24,
            "title": "Game Of Life",
            "description": "Game of life",
            "paths": 
                {
                    "TypeScript": "/game-of-life2/game-of-life2.component.ts",
                    "HTML": "/game-of-life2/game-of-life2.component.html",
                    "CSS": "/game-of-life2/game-of-life2.component.css"
                }
        },
        {
            "id": 25,
            "title": "Septic Tank",
            "description": "septic-tank",
            "paths": 
                {
                    "TypeScript": "/septic-tank/septic-tank.component.ts",
                    "HTML": "/septic-tank/septic-tank.component.html",
                    "CSS": "/septic-tank/septic-tank.component.css"
                }
        },
        {
            "id": 26,
            "title": "Linear Search",
            "description": "Function accepts an array and a value. Loop through the array and check if the current array element is equal to the value. If it is,return the index at which the element is found. If the value is never found,return -1.",
            "paths": 
                {
                    "TypeScript": "/linear-search/linear-search.component.ts",
                    "HTML": "/linear-search/linear-search.component.html",
                    "CSS": "/linear-search/linear-search.component.css"
                }
        },
        {
            "id": 27,
            "title": "Binary Search 2",
            "description": "binary search 2",
            "paths": 
                {
                    "TypeScript": "/binary-search-two/binary-search-two.component.ts",
                    "HTML": "/binary-search-two/binary-search-two.component.html",
                    "CSS": "/binary-search-two/binary-search-two.component.css"
                }
        },
        {
            "id": 28,
            "title": "String Search",
            "description": "Loop Over the longer string, Loop Over the shorter string. If the characters don’t match,break out of the inner loop. If the characters match, Keep going. If you complete the inner loop and find a match, increment the count of matches. Return the count",
            "paths": 
                {
                    "TypeScript": "/string-search/string-search.component.ts",
                    "HTML": "/string-search/string-search.component.html",
                    "CSS": "/string-search/string-search.component.css"
                }
        }
    ]
}